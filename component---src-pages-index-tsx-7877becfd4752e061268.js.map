{"version":3,"sources":["webpack:///./src/utils/typography.ts","webpack:///./src/pages/index.tsx","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/components/header/header.tsx","webpack:///./src/components/layout/layout.tsx","webpack:///./src/components/layout/index.ts","webpack:///./src/components/seo/seo.tsx","webpack:///./src/components/seo/index.ts"],"names":["typography","Typography","alton","rhythm","scale","__webpack_require__","d","__webpack_exports__","query","IndexPage","_ref","data","react_default","a","createElement","layout","seo","title","description","keywords","allMarkdownRemark","totalCount","edges","map","_ref2","node","key","id","gatsby_browser_entry","to","fields","slug","style","textDecoration","color","marginBottom","frontmatter","date","excerpt","StaticQuery","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","prop_types__WEBPACK_IMPORTED_MODULE_1__","prop_types__WEBPACK_IMPORTED_MODULE_1___default","gatsby_link__WEBPACK_IMPORTED_MODULE_2__","gatsby_link__WEBPACK_IMPORTED_MODULE_2___default","StaticQueryContext","React","createContext","props","Consumer","staticQueryData","render","children","propTypes","PropTypes","object","string","isRequired","func","m","module","exports","require","default","ProdPageRenderer","location","pageResources","loader","getResourcesForPathnameSync","pathname","InternalPageRenderer","Object","assign","json","shape","Header","siteTitle","margin","maxWidth","padding","Layout","Fragment","header","site","siteMetadata","paddingTop","Date","getFullYear","href","_755544856","SEO","lang","meta","_2417117884","metaDescription","Helmet_default","htmlAttributes","titleTemplate","name","content","property","author","concat","length","join","defaultProps","array","arrayOf"],"mappings":"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","file":"component---src-pages-index-tsx-7877becfd4752e061268.js","sourcesContent":["import Typography from 'typography'\nimport alton from 'typography-theme-alton'\n\nconst typography = new Typography(alton)\nexport default typography\n\nexport const rhythm = typography.rhythm\nexport const sclae = typography.scale\n","import { graphql, Link } from 'gatsby'\nimport React from 'react'\nimport Layout from '../components/layout'\nimport SEO from '../components/seo'\nimport { rhythm } from '../utils/typography'\n\nconst IndexPage: React.FunctionComponent<Props> = ({ data }) => (\n  <Layout>\n    <SEO\n      title=\"Home\"\n      description=\"Home\"\n      keywords={[\n        `eloiqs`,\n        `blog`,\n        `eloi`,\n        `software`,\n        `developer`,\n        `development`,\n      ]}\n    />\n    <div>\n      <h4>{data.allMarkdownRemark.totalCount} Posts</h4>\n      {data.allMarkdownRemark.edges.map(({ node }) => (\n        <div key={node.id}>\n          <Link\n            to={node.fields.slug}\n            style={{\n              textDecoration: 'none',\n              color: 'inherit',\n            }}\n          >\n            <h3\n              style={{\n                marginBottom: rhythm(1 / 4),\n              }}\n            >\n              {node.frontmatter.title}{' '}\n              <span\n                style={{\n                  color: '#bbb',\n                }}\n              >\n                â€” {node.frontmatter.date}\n              </span>\n            </h3>\n            <p>{node.excerpt}</p>\n          </Link>\n        </div>\n      ))}\n    </div>\n  </Layout>\n)\n\nexport default IndexPage\n\ninterface Props {\n  data: {\n    allMarkdownRemark: {\n      totalCount: number\n      edges: {\n        node: {\n          id: string\n          frontmatter: {\n            title: string\n            date: string\n          }\n          fields: {\n            slug: string\n          }\n          excerpt: string\n        }\n      }[]\n    }\n  }\n}\n\nexport const query = graphql`\n  query {\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n      totalCount\n      edges {\n        node {\n          id\n          frontmatter {\n            title\n            date(formatString: \"DD MMMM, YYYY\")\n          }\n          fields {\n            slug\n          }\n          excerpt\n        }\n      }\n    }\n  }\n`\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\n\nconst StaticQueryContext = React.createContext({})\n\nconst StaticQuery = props => (\n  <StaticQueryContext.Consumer>\n    {staticQueryData => {\n      if (\n        props.data ||\n        (staticQueryData[props.query] && staticQueryData[props.query].data)\n      ) {\n        return (props.render || props.children)(\n          props.data ? props.data.data : staticQueryData[props.query].data\n        )\n      } else {\n        return <div>Loading (StaticQuery)</div>\n      }\n    }}\n  </StaticQueryContext.Consumer>\n)\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away,. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n.` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n}\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\nimport loader from \"./loader\"\n\nconst ProdPageRenderer = ({ location }) => {\n  const pageResources = loader.getResourcesForPathnameSync(location.pathname)\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","import { Link } from 'gatsby'\nimport React from 'react'\n\ninterface Props {\n  siteTitle: string\n}\n\nconst Header = ({ siteTitle }: Props) => (\n  <header\n    style={{\n      marginBottom: '1.45rem',\n    }}\n  >\n    <div\n      style={{\n        margin: '0 auto',\n        maxWidth: 960,\n        padding: '1.45rem 1.0875rem',\n      }}\n    >\n      <h1 style={{ margin: 0 }}>\n        <Link to=\"/\">{siteTitle}</Link>\n      </h1>\n    </div>\n  </header>\n)\n\nexport default Header\n","/**\n * Layout component that queries for data\n * with Gatsby's StaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/static-query/\n */\n\nimport { graphql, StaticQuery } from 'gatsby'\nimport React from 'react'\nimport Header from '../header'\n\ninterface Props {\n  children: React.ReactNode\n}\n\nconst Layout = ({ children }: Props) => (\n  <StaticQuery\n    query={graphql`\n      query SiteTitleQuery {\n        site {\n          siteMetadata {\n            title\n          }\n        }\n      }\n    `}\n    render={data => (\n      <>\n        <Header siteTitle={data.site.siteMetadata.title} />\n        <div\n          style={{\n            margin: `0 auto`,\n            maxWidth: 960,\n            padding: `0px 1.0875rem 1.45rem`,\n            paddingTop: 0,\n          }}\n        >\n          <main>{children}</main>\n          <footer>\n            Â© {new Date().getFullYear()}, Built with\n            {` `}\n            <a href=\"https://www.gatsbyjs.org\">Gatsby</a>\n          </footer>\n        </div>\n      </>\n    )}\n  />\n)\n\nexport default Layout\n","export { default } from './layout'\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport { graphql, useStaticQuery } from 'gatsby'\nimport PropTypes from 'prop-types'\nimport React from 'react'\nimport Helmet from 'react-helmet'\n\ninterface Props {\n  description?: string\n  lang: string\n  meta: { name: string; content: string }[]\n  keywords: string[]\n  title: string\n}\n\nconst SEO = ({ description, lang, meta, keywords, title }: Props) => {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.author,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ]\n        .concat(\n          keywords.length > 0\n            ? {\n                name: `keywords`,\n                content: keywords.join(`, `),\n              }\n            : []\n        )\n        .concat(meta)}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  keywords: [],\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.array,\n  keywords: PropTypes.arrayOf(PropTypes.string),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n","export { default } from './seo'\n"],"sourceRoot":""}